// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: proto/id_gen.proto

package id_generator

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	IdGenerator_GenId_FullMethodName = "/id_generator.IdGenerator/GenId"
)

// IdGeneratorClient is the client API for IdGenerator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IdGeneratorClient interface {
	GenId(ctx context.Context, in *IdGenRequest, opts ...grpc.CallOption) (*IdGenResponse, error)
}

type idGeneratorClient struct {
	cc grpc.ClientConnInterface
}

func NewIdGeneratorClient(cc grpc.ClientConnInterface) IdGeneratorClient {
	return &idGeneratorClient{cc}
}

func (c *idGeneratorClient) GenId(ctx context.Context, in *IdGenRequest, opts ...grpc.CallOption) (*IdGenResponse, error) {
	out := new(IdGenResponse)
	err := c.cc.Invoke(ctx, IdGenerator_GenId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IdGeneratorServer is the server API for IdGenerator service.
// All implementations must embed UnimplementedIdGeneratorServer
// for forward compatibility
type IdGeneratorServer interface {
	GenId(context.Context, *IdGenRequest) (*IdGenResponse, error)
	mustEmbedUnimplementedIdGeneratorServer()
}

// UnimplementedIdGeneratorServer must be embedded to have forward compatible implementations.
type UnimplementedIdGeneratorServer struct {
}

func (UnimplementedIdGeneratorServer) GenId(context.Context, *IdGenRequest) (*IdGenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenId not implemented")
}
func (UnimplementedIdGeneratorServer) mustEmbedUnimplementedIdGeneratorServer() {}

// UnsafeIdGeneratorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IdGeneratorServer will
// result in compilation errors.
type UnsafeIdGeneratorServer interface {
	mustEmbedUnimplementedIdGeneratorServer()
}

func RegisterIdGeneratorServer(s grpc.ServiceRegistrar, srv IdGeneratorServer) {
	s.RegisterService(&IdGenerator_ServiceDesc, srv)
}

func _IdGenerator_GenId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdGenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdGeneratorServer).GenId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdGenerator_GenId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdGeneratorServer).GenId(ctx, req.(*IdGenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IdGenerator_ServiceDesc is the grpc.ServiceDesc for IdGenerator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IdGenerator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "id_generator.IdGenerator",
	HandlerType: (*IdGeneratorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenId",
			Handler:    _IdGenerator_GenId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/id_gen.proto",
}
